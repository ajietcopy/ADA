#include<stdio.h>
int min(int,int);
void floyds(int p[10][10],int n)
{
int i,j,k;
for(k=1;k<=n;k++)
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
if(i==j)
p[i][j]=0;
else
p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
}
int min(int a,int b)
{
if(a<b)
return(a);
else
return(b);
}
void main()
{
int p[10][10],w,n,e,u,v,i,j;
printf("\nEnter the number of vertices:");
scanf("%d",&n);
printf("\nEnter the number of edges:\n");
scanf("%d",&e);
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
p[i][j]=999;

ANALYSIS AND DESIGN OF ALGORITHMS

AJIET, MANGALURU 10
}
for(i=1;i<=e;i++)
{
printf("\nEnter the end vertices of edge %d with its weight\n",i);
scanf("%d %d %d",&u,&v,&w);
p[u][v]=w;
}
printf("\nMatrix of input data:\n");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
printf("%d\t",p[i][j]);
printf("\n");
}
floyds(p,n);
printf("\nTransitive closure:\n");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
printf("%d\t",p[i][j]);
printf("\n");
}
printf("\nThe shortest paths are:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
{
if(i!=j)
printf("\n<%d,%d>=%d",i,j,p[i][j]);
}
}




#include<stdlib.h>
#include<stdio.h>
int**a,n;
void warshall()
{
int i,j,k;
for(k=0;k<n;k++){
for(j=0;j<n;j++){
for(i=0;i<n;i++){
a[i][j]=a[i][j]||a[i][k]&&a[k][j];
}
}
}
}
void print_array()
{
int i,j;
for(i=0;i<n;i++){
for(j=0;j<n;j++){
printf("%d\t",a[i][j]);
}
printf("\n");
}
}
int main()
{
int i,j;
printf("Number of vertices:");
scanf("%d",&n);
a=calloc(n,sizeof(int*));
for(i=0;i<n;i++){
a[i]=calloc(n,sizeof(int));
}
printf("Adjacency Matrix:\n");
for(i=0;i<n;i++){
for(j=0;j<n;j++){
scanf("%d",&a[i][j]);
}
}
printf("Entered adjacency matrix:\n");
print_array();
warshall();
printf("Transitive closure matrix:\n");

ANALYSIS AND DESIGN OF ALGORITHMS

AJIET, MANGALURU 13
print_array();
return 0;
}
